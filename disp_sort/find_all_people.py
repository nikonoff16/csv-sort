import csv
import re


def find_all_people(file_obj, years_dict):  # Индекс нужен чтобы программа сама находила нужные поля в таблице.
    """
    Функция принимает csv-таблицу и словарь списков с годами для каждого вида осмотра, предусмотренного
    законом о проведении диспансеризации (редакции мая 2019 года).
    Возвращает она словарь из двойных списков, отсортированных по признаку принадлежности года рождения к
    той или иной категории.
    """
    reader = csv.reader(file_obj)

    # Берем данные из json-конфига
    result = {}  # В этом словаре будут храниться результаты работы программы, он же и будет выводом функции
    for category in years_dict.keys():
        result[category] = []

    # Настройка служебных переменных.
    index = 0  # Будущий указатель индекса даты в ряде
    first_string = 0  # Переменная, нужная для создания заголовков и верного нахождения индекса даты

    # Цикл ищет всех подлежащих диспансеризации в таблице.
    for row in reader:
        # Первый блок вставляет строку с заголовками в оба списка и определяет индекс даты в ряде
        if first_string == 0:
            for category in years_dict.keys():
                result[category].append(row)  # Вставляет строку заголовка в каждый из новых списков
            first_string += 1
            continue  # Нужно только здесь, чтобы не вызвать ошибку ошибку типа переменной index.

        # Блок поиска столбца даты.
        elif first_string == 1:  # Проверяем только на второй строке текста
            text_search_for = r"\d{2}.\d{2}.\d{4}"  # регулярка для поиска даты по четкому шаблону
            for foo in row:
                is_matching = re.search(text_search_for, foo)
                if is_matching and len(foo) == 10:  # На всякий случай проверяем еще и длину строки
                    index = row.index(foo)  # Меняем индекс 0 на найденный интекс даты.
                    break  # Прерываем поиск, когда находим.
            first_string += 1  # Делаем этот блок недостпным для исполнения впредь.

        # Второй блок осуществяет уже поиск по годам и запись в новые таблицы
        for category in years_dict.keys():  # Раскидываем по новым спискам данные
            if row[index][6:] in years_dict[category]:
                result[category].append(row)
    return result
